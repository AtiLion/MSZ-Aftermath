using System;
using System.Reflection;
using System.Collections.Generic;
using System.Text;
using UnityEngine;
using SDG.Unturned;

namespace MSZ_Aftermath.Injections
{
    public class VehicleExploiter : MonoBehaviour
    {
        private EEngine backup_Engine;
        private bool backup_LockedMouse;
        private bool backup_Sleds;
        private bool backup_Traction;
        private float backup_Lift;
        private float backup_Breaks;
        private float backup_SteerMin;
        private float backup_SteerMax;
        private float backup_MinSpeed;

        private InteractableVehicle iv;
        private bool inFly = false;

        public void Start()
        {
            iv = gameObject.GetComponent<InteractableVehicle>();

            backup_Engine = iv.asset.engine;
            backup_LockedMouse = iv.asset.hasLockMouse;
            backup_Sleds = iv.asset.hasSleds;
            backup_Traction = iv.asset.hasTraction;
            backup_Lift = iv.asset.lift;
            backup_Breaks = iv.asset.brake;
            backup_SteerMin = iv.asset.steerMin;
            backup_SteerMax = iv.asset.steerMax;
        }

        public void Update()
        {
            if (ComponentManager.hack_Vehicle.fly)
            {
                iv.asset.GetType().GetField("_engine", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, EEngine.PLANE);
                iv.asset.GetType().GetField("_hasLockMouse", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, true);
                iv.asset.GetType().GetField("_hasSleds", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, true);
                iv.asset.GetType().GetField("_hasTraction", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, true);
                iv.asset.GetType().GetField("_lift", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, 5f);
                iv.asset.GetType().GetField("_brake", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, 32f);
                iv.asset.GetType().GetField("_steerMin", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, 8f);
                iv.asset.GetType().GetField("_steerMax", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, 32f);
                inFly = true;
            }
            else if(inFly)
            {
                iv.asset.GetType().GetField("_engine", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, backup_Engine);
                iv.asset.GetType().GetField("_hasLockMouse", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, backup_LockedMouse);
                iv.asset.GetType().GetField("_hasSleds", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, backup_Sleds);
                iv.asset.GetType().GetField("_hasTraction", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, backup_Traction);
                iv.asset.GetType().GetField("_lift", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, backup_Lift);
                iv.asset.GetType().GetField("_brake", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, backup_Breaks);
                iv.asset.GetType().GetField("_steerMin", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, backup_SteerMin);
                iv.asset.GetType().GetField("_steerMax", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, backup_SteerMax);
                inFly = false;
            }

            if (ComponentManager.hack_Vehicle.speed != iv.asset.speedMax)
            {
                iv.asset.GetType().GetField("_speedMax", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv.asset, ComponentManager.hack_Vehicle.speed);
            }

            if (ComponentManager.hack_Vehicle.instantSpeed)
            {
                if (Input.GetKeyDown(ControlsSettings.up))
                {
                    if (iv.spedometer != iv.asset.speedMax)
                    {
                        iv.GetType().GetField("_speed", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv, iv.asset.speedMax);
                        iv.GetType().GetField("_spedometer", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(iv, iv.asset.speedMax);
                    }
                }
            }

            if (ComponentManager.hack_Vehicle.noclip)
            {

            }
        }
    }
}
